; ==============================================================================
; Voting platform configuration file
; ==============================================================================
;
; This file contains all parameters for "branding" the voting platform to 
; specific organisations/for specific purposes. It also includes configurable 
; fields for the Policy model (built based on the initiative model) and its
; possible states, the idea to eventually enable both to be configurable
;
; parameters (*default)
; ------------------------------------------------------------------------------

[settings]
DEFAULT_TIMEZONE = Europe/Berlin
DEFAULT_LANGUAGE = en-us
VIRTUAL_HOST_LIST = localhost
DEFAULT_FROM_EMAIL = keine-antwort@bewegung.jetzt
DEFAULT_CONTACT_EMAIL = hallo@bewegung.jetzt
THEME_CONTACT_EMAIL = support@bewegung.jetzt
INITIATIVE_SUPPORT_EMAIL = plenum-hilfe@bewegung.jetzt
CORS_ORIGIN_WHITELIST = bewegung.jetzt,portal.bewegung.jetzt
MIN_SEARCH_LENGTH = 3
URL_HOWTO_INITIATIVE = https://marktplatz.bewegung.jetzt/t/eine-initiative-starten-und-mitinitiatoren-einladen/2593

ACCOUNT_DELETION_EXPUNGE_HOURS = 0
PLATFORM_TITLE = DEMOKRATIE IN BEWEGUNG
PLATFORM_SUB_TITLE = Abstimmungsplattform
PLATFORM_TITLE_ACRONYM = DiB
PLATFORM_BACKCOMPAT_GROUP_LIST = PrÃÂ¼fungsteam
PLATFORM_BACKCOMPAT_PERMISSION_LIST = add_moderation

PLATFORM_DEFAULT_URL = https://bewegung.jetzt
PLATFORM_MARKETPLACE_URL = https://marktplatz.bewegung.jetzt
PLATFORM_REGISTRATION_URL = https://bewegung.jetzt/bewegerin-werden/
PLATFORM_LEGAL_URL = https://bewegung.jetzt/impressum/
PLATFORM_DATA_PROTECTION_URL = https://bewegung.jetzt/datenschutz/
INITIATIVE_TEMPLATE_URL = https://docs.google.com/document/d/1cih1abHKN1mpqN_YpfXE5pAozcAELJ68wJd4Yi8G1u4/edit
INITIATIVE_EXPLANATION_URL = https://bewegung.jetzt/2017/04/03/so-funktioniert-das-initiativprinzip/
PLATFORM_VOTING_REGULATION_URL = https://bewegung.jetzt/wp-content/uploads/2017/12/Abstimmungsordnung-Stand-27.-November-2017.pdf
PLATFORM_TECH_DEVELOPMENT_URL = https://marktplatz.bewegung.jetzt/c/weiter-entwicklung-plenum-marktplatz
PLATFORM_TECH_SUPPORT_URL = https://marktplatz.bewegung.jetzt/groups/Team_Tech_Plenum
PLATFORM_TECH_SOURCE_CODE_URL = https://github.com/DemokratieInBewegung/abstimmungstool
PLATFORM_TECH_DEVELOPMENT_TICKET_URL = https://github.com/DemokratieInBewegung/abstimmungstool/projects/3
PLATFORM_SOCIAL_MEDIA_LOGO_URL = /img/dib-logo-social.jpg
PLATFORM_LOGO_URL = /img/dib_logo.svg

SITE_FONT_CSS_URL = https://fonts.googleapis.com/css?family=Merriweather:300,400,400i,700|Rubik:400,400i,500,500i,700
SITE_THEME_CSS_URL = /static/dib.css
SITE_JS_URL = js/dib/utils.js

; -------------------------- user configuration options ------------------------
; enforce unique emails (careful, ONLY ACTIVATE WHEN SETTING UP FROM SCRATCH)
USER_USE_UNIQUE_EMAILS = 0

; enforce diverse moderation
USER_USE_DIVERSE_MODERATION_TEAM = 1

; ---------------------------- moderator settings ------------------------------
[moderation_setting_list]
MINIMUM_MODERATOR_VOTES = 2
MINIMUM_MODERATOR_PERCENTAGE = 20
MINIMUM_FEMALE_MODERATOR_VOTES = 3
MINIMUM_DIVERSE_MODERATOR_VOTES = 2


; ----------------------------- language settings ------------------------------
; available languages on the platform
[alternative_language_list]
de = {% trans "German" %}
en = {% trans "English" %}

; --------------------------- groups and permissions ---------------------------
; requires: initadmin/management/commands/ => set_groups_and_permission to be run
[platform_group_list]
TEAM = policy_team
LEAD = policy_team_lead

[platform_group_value_list]
TEAM = Policy Team Member
LEAD = Policy Team Lead

[platform_group_user_permission_mapping]
TEAM = user_can_localise,user_can_activate,user_can_reset,user_can_invite,user_can_diversify
LEAD = user_can_localise,user_can_delete,user_can_activate,user_can_nominate,user_can_reset,user_can_invite,user_can_diversify

; values => permission-tite,model-to-apply-to
[platform_user_permission_list]
USER_CAN_LOCALISE = user_can_localise,auth.user
USER_CAN_DELETE = user_can_delete,auth.user
USER_CAN_ACTIVATE = user_can_activate,auth.user
USER_CAN_NOMINATE = user_can_nominate,auth.user
USER_CAN_RESET = user_can_reset,auth.user
USER_CAN_INVITE = user_can_invite,auth.user
USER_CAN_DIVERSIFY = user_can_diversify,auth.user

[platform_user_permission_value_list]
USER_CAN_LOCALISE = Can validate scope setting chosen by a user
USER_CAN_DELETE = Can delete a user and anonymise his contributions
USER_CAN_ACTIVATE = Can activate and deactivate a user account
USER_CAN_NOMINATE = Can add user to Policy Team or Policy Team Lead
USER_CAN_RESET = Can set/reset user email
USER_CAN_INVITE = Can invite new user(s) to the platform
USER_CAN_DIVERSIFY = Can add female/diverse flag to a user

; vote states (moved from initproc/globals.py)
[policy_vote_state_list]
NO = 0
YES = 1
ABSTAIN = 2

[policy_vote_state_value_list]
NO = {% "No" %}
YES = {% "Yes" %}
ABSTAIN = {% "Abstain" %}

; moderation
[policy_moderation_state_list]
NO = n
YES = y
ABSTAIN = a
; XXX what is request?
REQUEST = r

[policy_moderation_state_value_list]
NO = {% "no" %}
YES = {% "ok" %}
ABSTAIN = {% "abstain" %}
REQUEST = {% "request%" %}

; notifications (moved from initproc/globals.py)
; there are states, values and descriptions, this should be the only place to 
; define them. As pinax cannot handle notifications based on models (auth) and
; there seeems no way to associate a notification to a permission, we
; prefix by model... meh, not good, split in restricted and public
[notification_restricted_state_list]
USER_LOCALISATION_REQUESTED = user_localisation_requested
USER_DELETION_REQUESTED = user_deletion_requested

; map restricted permissions to notifications so settings can be displayed
[notification_restricted_state_permission_mapping_list]
USER_LOCALISATION_REQUESTED = user_can_localise
USER_DELETION_REQUESTED = user_can_delete

[notification_public_state_list]
USER_LOCALISATION_ACCEPTED = user_localisation_accepted
SUPPORT_INVITE = invite_sent
SUPPORT_ACCEPTED = invite_accepted
SUPPORT_REJECTED = invite_rejected
EDITED = init_edited
SUBMITTED = init_submitted
PUBLISHED = init_published
WENT_TO_DISCUSSION = init_discussion
DISCUSSION_CLOSED = init_discussion_closed
WENT_TO_VOTE = init_vote
ACCEPTED = init_accepted
REJECTED = init_rejected
NEW_ARGUMENT = init_new_arg

[notification_i18n_todo_list]
USER_LOCALISATION_REQUESTED = {% trans "Localisation Requests" %}
USER_LOCALISATION_ACCEPTED = {% trans "Localisation Validated" %}
USER_DELETION_REQUESTED = {% trans "Deletion Requests" %}
SUPPORT_INVITE = {% trans "Support Requests" %}
SUPPORT_ACCEPTED = {% trans "Support Pledges" %}
SUPPORT_REJECTED = {% trans "Support Declines" %}
EDITED = {% trans "Initiatives modified" %}
SUBMITTED = {% trans "Initiatives submitted" %}
PUBLISHED = {% trans "Initiatives published" %}
WENT_TO_DISCUSSION = {% trans "Initiatives in discussion" %}
DISCUSSION_CLOSED = {% trans "Initiatives to finalize" %}
WENT_TO_VOTE = {% trans "Initiative to Vote on" %}
ACCEPTED = {% trans "Initiatives accepted" %}
REJECTED = {% trans "Initiatives rejected" %}
NEW_ARGUMENT = {% trans "New Arguments submitted" %}

[notification_i18n_value_list]
USER_LOCALISATION_REQUESTED = {% trans "Localisation Request" %}
USER_LOCALISATION_ACCEPTED = {% trans "Localisation Validated" %}
USER_DELETION_REQUESTED = {% trans "Deletion Request" %}
SUPPORT_INVITE = {% trans "Support Request" %}
SUPPORT_ACCEPTED = {% trans "Support Pledged" %}
SUPPORT_REJECTED = {% trans "Support Declined" %}
EDITED = {% trans "Initiative modified" %}
SUBMITTED = {% trans "Initiative submitted" %}
PUBLISHED = {% trans "Initiative published" %}
WENT_TO_DISCUSSION = {% trans "Initiative in discussion" %}
DISCUSSION_CLOSED = {% trans "Discussion for Initiative ended" %}
WENT_TO_VOTE = {% trans "Initiative in Vote" %}
ACCEPTED = {% trans "Initiative accepted" %}
REJECTED = {% trans "Initiative rejected" %}
NEW_ARGUMENT = {% trans "New Argument in Discussion for Initiative" %}

[notification_i18n_description_list]
USER_LOCALISATION_REQUESTED = {% trans "A user requests a localisation change to be validated." %}
USER_LOCALISATION_ACCEPTED = {% trans "The localisation request was accepted." %}
USER_DELETION_REQUESTED = {% trans "A user requested to delete his account." %}
SUPPORT_INVITE = {% trans "You have been invited to support a new Initiative." %}
SUPPORT_ACCEPTED = {% trans "The user gave his support for this Initiative. " %}
SUPPORT_REJECTED = {% trans "The user declined support for this Initiative." %}
EDITED = {% trans "The Initiative was modified." %}
SUBMITTED = {% trans "The Initiative was submitted." %}
PUBLISHED = {% trans "The Initiative was published." %}
WENT_TO_DISCUSSION = {% trans "The Initiative has been moved to the discussion phase." %}
DISCUSSION_CLOSED = {% trans "The Initiative can now be finally modified." %}
WENT_TO_VOTE = {% trans "The Initiative has been put to Vote." %}
ACCEPTED = {% trans "The Initiative has been accepted." %}
REJECTED = {% trans "The Initiative has been rejected." %}
NEW_ARGUMENT = {% trans "A new Argument was postet in the Discussion for the Initiative." %} 

; --------------------------- dynamic policy -------------------------------
; this is a customisable rebuild of initiative. calling it policy for now
; the following will be loaded by a dynamic model to form the base for the 
; policy class later on. This way fields of an policy become configurable
; and as long as simply inserted via form|bootstrap, this should translate ok
[platform_policy_base_config]
title = models.CharField(max_length=255)
subtitle = models.CharField(max_length=1024, blank=True)
description = models.TextField(blank=True)
challenge = models.TextField(blank=True)
demand = models.TextField(blank=True)
expected_cost = models.TextField(blank=True)
proposed_financing = models.TextField(blank=True)
methodology =  models.TextField(blank=True)
initial_argument = models.TextField(blank=True)
;previous-Einordnung/Ebene/Bereich, choices will be set using categories
context = models.CharField(max_length=60)
scope = models.CharField(max_length=60)
topic = models.CharField(max_length=60)
;text_content = models.TextField(blank=True)
;tags = models.ManyToManyField(Tag, blank=True)

[platform_policy_field_title_dict]
title = {% trans "Headline" %}
subtitle = {% trans "Teaser" %}
description = {% trans "Summary" %}
challenge = {% trans "Situation Assessment" %}
demand = {% trans "Initiative Proposal" %}
expected_cost = {% trans "Cost Estimation" %}
proposed_financing = {% trans "Financial Proposition" %}
methodology = {% trans "Methodolgy" %}
initial_argument = {% trans "Initiator Argument" %}
context = {% trans "Context" %}
scope = {% trans "Scope" %}
topic = {% trans "Topic" %}
text_content= {% trans "Initiative Text" %}
tags = {% trans "Keywords" %}

[platform_policy_field_description_dict]
title = {% trans "The title should state the policy in a short and precise manner." %}
subtitle = {% trans "Briefly describe the problem or situation the policy should adress. Use 1-2 sentences only." %}
description = {% trans "Summarize the policy in a 3-4 sentences." %}
challenge = {% trans "State and assess the situation or problem, the policy should adress in 3-4 sentences." %}
demand = {% trans "What are the concrete demands or proposals?" %}
expected_cost = {% trans "Will the policy cause costs? Try to give an estimation of the cost associated with the policy." %}
proposed_financing = {% trans "Briefly describe ideas of how costs associated with the policy could be covered, for example by financing through taxable income." %}
methodology = {% trans "Have you consulted experts? What information is the assessment based on? Is it possible to name information sources?" %}
initial_argument = {% trans "Please state why this policy is relevant for you and why you are submitting it." %}
context = {% trans "The context this policy is belonging to, for example Health, Economy, Environment." %}
scope = {% trans "The scope for this policy, for example European or EU level." %}
topic = {% trans "The specific challenge this policy can be associated to." %}
;text_content={% trans "The actual policy text content" %}
;tags = {% trans "Comma separated list of keywords by which this policy is searchable" %}

; Policy states and transitions (more or less corresponding to initiative states
; used to be globals.py STATES, like "p", "i", etc
;
; Permissions groups recap:
; Owner can view his document
; Manager can do all
; Author can create documents
; Auditor can view documents
; Assignor can view/modify/delete/create documents, assign users to specific documents
; Assignee can view/modify/delete/ only on some documents (assigned);
; Associate can work only on documents under condition (related to something)
;
; scope/context/topic ~ group/function/category
; user role => determines items user can interact with (vote/comment etc)
; user group/function/category => determines items use can view, scope: vote etc
;
; STATE (* public)          TRANSITIONS                                   PERMISSIONS                 
; ---------------------------------------------------------------------------------------------
; draft                     user:edit->draft                              policy_edit
;                           user:delete->deleted                          policy_delete
;                           user:show->showed                             policy_show
;                           mods:publish->published                       policy_publish
; deleted                   admin:undelete->hidden                        policy_undelete
; showed* (PREPARE)         user:submit->submitted                        policy_submit
;                           user:edit->showed
;                           user:delete->deleted
; ============= WIP
; submitted (INCOMING)      team:validate->validated                      policy_validate
;                           team:invalidate->invalidated                  policy_invalidate
;                           team:reject->rejected                         policy_reject
; invalidated               user:edit->invalidated
;                           user:delete->deleted
;                           user:submit->submitted
; rejected                  user:challenge->challenged                    policy_challenge
;                           admin:delete->deleted
;                           admin:hide->hidden                            policy_hide
;                           team:close->closed                            policy_closed
; closed                    team:reopen->draft                            policy_reopen  
; hidden                    admin:unhide->rejected                        policy_unhide

; challenged                moderator:validate->challenged/validated
;                           moderator:reject->challened/rejected
; validated                 user:support->validated/rejected/supported    policy_support
;                           user:unsupport->validated/rejected/supported  policy_unsupport
; supported                 user:clone->[make variant policy]             policy_clone
;                           team:discuss->in discussion                   policy_discuss
; in discussion             team:review->in review                        policy_review
; in review                 user:edit->in review
;                           user:stage->staged                            policy_stage
; staged                    team:unstage->in review:                      policy_unstage
;                           team:release->released                        policy_release
; released                  user:vote->accepted/rejected                  policy_vote
;                           user:delegate->accepted/rejected              policy_delegate
; accepted                  team:publish->published                       policy_publish
; published                 user:amend->amened                            policy_amend
; amended                   team:validate->validated
;                           team:invalidated->amended
;                           team:reject->published
;                           team:publish->published
[platform_policy_state_list]
DRAFT = draft
DELETED = submitted
SHOWED = invalidated

[platform_policy_state_value_list]
DRAFT = {% trans "in preparation" %}
DELETED = {% trans "deleted" %}
SHOWED = {% trans "is visible

[platform_policy_permission_list]
POLICY_CREATE = policy_create
POLICY_EDIT = policy_edit
POLICY_DELETE = policy_delete
POLICY_SUBMIT = policy_submit

[platform_policy_permission_value_list]
POLICY_CREATE = {% trans "Can create new policy" %}
POLICY_EDIT = {% trans "Can edit policy" %}
POLICY_DELETE = {% trans "Can delete policy" %}
POLICY_SUBMIT = {% trans "Can submit policy" %}

;policy_publish = {% trans "Can publish initiative" %}
;policy_validate = {% trans "Can validate initiative" %}
;policy_invalidate = {% trans "Can send initiative back for corrections" %}
;policy_reject = {% trans "Can reject initiative" %}
;policy_challenge = {% trans "Can challenge initiative" %}
;policy_hide = {% trans "Can hide initiative" %}
;policy_unhide = {% trans "Can unhide initiative" %}
;policy_undelete = {% trans "Can undelete initiative" %}
;policy_support = {% trans "Can support initiative" %}
;policy_unsupport = {% trans "Can revoke initiative support" %}
;policy_clone = {% trans "Can clone initiative" %}
;policy_discuss = {% trans "Can discuss initiative" %}
;policy_review = {% trans "Can review initiative" %}
;policy_stage = {% trans "Can stage initiative for vote" %}
;policy_unstage = {% trans "Can unstage initiative for corrections" %}
;policy_release = {% trans "Can release initiative for voting" %}
;policy_vote = {% trans "Can vote initiative on policy" %}
;policy_delegate = {% trans "Can delegate vote for initiative" %}
;policy_amend = {% trans "Can amend this initiative" %}
;policy_close = {% trans "Can close this initiative" %}
;policy_reopen = {% trans "Reopen this initiative" %}



; ------------------------------- categories -----------------------------------
; scope (previous Ebene)
; set on initiatives and users, determines permission to vote on an initiative
; and edit/view initiatives. Scope on users is validated by custom groups
; Default scope: EU => can only vote on european initiatives
; Set to EU/[country] => can vote on european and national initiatives
;   eg EU/France: vote on EU and France initiatives
; Set to EU/[country]/[city] => can vote on european, national, local level
;   eg EU/France/Paris: vote on EU, France, Paris initiatives
;   eg EU/France/Lille: vote on EU, France, Lille initiatives (not Paris)
[scope_list]
EU = eu
EU_AT = eu-at
EU_BE = eu-be
EU_BG = eu-bg
EU_HR = eu-hr
EU_CY = eu-cy
EU_CZ = eu-cz
EU_DK = eu-dk
EU_EE = eu-ee
EU_FI = eu-fi
EU_FR = eu-fr
EU_FR_PARIS = eu-fr-paris 
EU_FR_LILLE = eu-fr-lille
EU_FR_TOULOUSE = eu-fr-toulouse
EU_DE = eu-de
EU_GR = eu-gr
EU_HU = eu-hu
EU_IE = eu-ie
EU_IT = eu-it
EU_LV = eu-lv
EU_LT = eu-lt
EU_LU = eu-lu
EU_MT = eu-mt
EU_NL = eu-nl
EU_PL = eu-pl
EU_PT = eu-pt
EU_RO = eu-ro
EU_SK = eu-sk
EU_SI = eu-si
EU_ES = eu-es
EU_SE = eu-se
EU_GB = eu-gb

[scope_value_list]
EU = {% trans "Europe" %}
EU_AT = {% trans "Europe/Austria" %}
EU_BE = {% trans "Europe/Belgium" %}
EU_BG = {% trans "Europe/Bulgaria" %}
EU_HR = {% trans "Europe/Croatia" %}
EU_CY = {% trans "Europe/Cyprus" %}
EU_CZ = {% trans "Europe/Czech Republic" %}
EU_DK = {% trans "Europe/Denmark" %}
EU_EE = {% trans "Europe/Estonia" %}
EU_FI = {% trans "Europe/Finland" %}
EU_FR = {% trans "Europe/France" %}
EU_FR_PARIS = {% trans "Europe/France/Paris" %}
EU_FR_LILLE = {% trans "Europe/France/Lille" %}
EU_FR_TOULOUSE = {% trans "Europe/France/Toulouse" %}
EU_DE = {% trans "Europe/Germany" %}
EU_GR = {% trans "Europe/Greece" %}
EU_HU = {% trans "Europe/Hungary" %}
EU_IE = {% trans "Europe/Ireland" %}
EU_IT = {% trans "Europe/Italy" %}
EU_LV = {% trans "Europe/Latvia" %}
EU_LT = {% trans "Europe/Lithuania" %}
EU_LU = {% trans "Europe/Luxembourg" %}
EU_MT = {% trans "Europe/Malta" %}
EU_NL = {% trans "Europe/Netherlands" %}
EU_PL = {% trans "Europe/Poland" %}
EU_PT = {% trans "Europe/Portugal" %}
EU_RO = {% trans "Europe/Romania" %}
EU_SK = {% trans "Europe/Slovakia" %}
EU_SI = {% trans "Europe/Slovenia" %}
EU_ES = {% trans "Europe/Spain" %}
EU_SE = {% trans "Europe/Sweden" %}
EU_GB = {% trans "Europe/United Kingdom" %}

; topic, previous "Bereich"
[topic_list]
SMART_STATE = smart_state
ECONOMIC_RENAISSANCE = economic_renaissance
SOCIAL_EQUALITY = social_equalty
GLOBAL_BALANCE = global_balance
CITIZEN_EMPOWERMENT = citizen_empowerment
EU_REFORM = eu_reform

[topic_value_list]
SMART_STATE = {% trans "Smart State" %}
ECONOMIC_RENAISSANCE = {% trans "Economic Rennaisance" %}
SOCIAL_EQUALITY = {% trans "Social Equality" %}
GLOBAL_BALANCE = {% trans "Global Balance" %}
CITIZEN_EMPOWERMENT = {% trans "Citizen Empowerment" %}
EU_REFORM = {% trans "EU Reform" %}

; context, previous "Einordnung"
; contrary to upstream I would not mix different types of votes into the
; initiative process. A modification could always be made via an amendment and 
; a new state while different types of votes in theory belong somewhere else
; and in practive should have their own equivalent to initiative and not taint
; the initiative process. Long story short, context should be relevant for an 
; initiative and not hijacked for other purposes
[context_list]
FINANCE = finance
FOREIGN_POLICY = foreign_policy
DOMESTIC_POLICY = domestic_policy
ECONOMY = economy
ENERGY = energy
JUSTICE_CONSUMER_PROTECTION = justice_consumer_protection
LABOR_SOCIAL_WELFARE = labor_social_welfare
DEFENSE = defense
AGRICULTURE = agriculture
FAMILY_AFFAIRS = family_affairs
HEALTH = health
TRANSPORT_DIGITAL_INFRASTRUCTURE = transport_digital_infrastructure
ENVIRONMENTAL_PROTECTION = environmental_protection
EDUCATION_RESEARCH = education_research
ECONOMIC_COOPERATION_DEVELOPMENT = economic_cooperation_development

[context_value_list]
FINANCE = {% trans "Finance" %}
FOREIGN_POLICY = {% trans "Foreign Policy" %}
DOMESTIC_POLICY = {% trans "Domestic Policy" %}
ECONOMY = {% trans "Economy" %}
ENERGY = {% trans "Energy" %}
JUSTICE_CONSUMER_PROTECTION = {% trans "Justice and Consumer Protection" %}
LABOR_SOCIAL_WELFARE = {% trans "Labor and Social Welfare" %}
DEFENSE = {% trans "Defense" %}
AGRICULTURE = {% trans "Agriculture" %}
FAMILY_AFFAIRS = {% trans "Family Affairs" %}
HEALTH = {% trans "Health" %}
TRANSPORT_DIGITAL_INFRASTRUCTURE = {% trans "Transport and Digital Infrastructure" %}
ENVIRONMENTAL_PROTECTION = {% trans "Environmental Protection" %}
EDUCATION_RESEARCH = {% trans "Education and Research" %}
ECONOMIC_COOPERATION_DEVELOPMENT = {% trans "Economic Cooperation and Development" %}





